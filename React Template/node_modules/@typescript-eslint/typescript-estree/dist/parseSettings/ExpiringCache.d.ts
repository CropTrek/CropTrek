import type { CacheDurationSeconds } from '@typescript-eslint/types';
export declare const DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS = 30;
<<<<<<< HEAD
export interface CacheLike<Key, Value> {
    get(key: Key): Value | void;
    set(key: Key, value: Value): this;
}
/**
 * A map with key-level expiration.
 */
export declare class ExpiringCache<TKey, TValue> implements CacheLike<TKey, TValue> {
    #private;
    constructor(cacheDurationSeconds: CacheDurationSeconds);
    set(key: TKey, value: TValue): this;
    get(key: TKey): TValue | undefined;
=======
/**
 * A map with key-level expiration.
 */
export declare class ExpiringCache<TKey, TValue> {
    #private;
    /**
     * The mapping of path-like string to the resolved TSConfig(s)
     */
    protected readonly map: Map<TKey, Readonly<{
        value: TValue;
        lastSeen: [number, number];
    }>>;
    constructor(cacheDurationSeconds: CacheDurationSeconds);
    set(key: TKey, value: TValue): this;
    get(key: TKey): TValue | undefined;
    protected cleanupKey(key: TKey): void;
    get size(): number;
>>>>>>> 796d1079518810912263b1fa7cb93163e5de5037
    clear(): void;
}
//# sourceMappingURL=ExpiringCache.d.ts.map